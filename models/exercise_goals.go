// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ExerciseGoal is an object representing the database table.
type ExerciseGoal struct {
	ID           int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       int    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ExerciseGoal string `boil:"exercise_goal" json:"exercise_goal" toml:"exercise_goal" yaml:"exercise_goal"`

	R *exerciseGoalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exerciseGoalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExerciseGoalColumns = struct {
	ID           string
	UserID       string
	ExerciseGoal string
}{
	ID:           "id",
	UserID:       "user_id",
	ExerciseGoal: "exercise_goal",
}

var ExerciseGoalTableColumns = struct {
	ID           string
	UserID       string
	ExerciseGoal string
}{
	ID:           "exercise_goals.id",
	UserID:       "exercise_goals.user_id",
	ExerciseGoal: "exercise_goals.exercise_goal",
}

// Generated where

var ExerciseGoalWhere = struct {
	ID           whereHelperint
	UserID       whereHelperint
	ExerciseGoal whereHelperstring
}{
	ID:           whereHelperint{field: "`exercise_goals`.`id`"},
	UserID:       whereHelperint{field: "`exercise_goals`.`user_id`"},
	ExerciseGoal: whereHelperstring{field: "`exercise_goals`.`exercise_goal`"},
}

// ExerciseGoalRels is where relationship names are stored.
var ExerciseGoalRels = struct {
}{}

// exerciseGoalR is where relationships are stored.
type exerciseGoalR struct {
}

// NewStruct creates a new relationship struct
func (*exerciseGoalR) NewStruct() *exerciseGoalR {
	return &exerciseGoalR{}
}

// exerciseGoalL is where Load methods for each relationship are stored.
type exerciseGoalL struct{}

var (
	exerciseGoalAllColumns            = []string{"id", "user_id", "exercise_goal"}
	exerciseGoalColumnsWithoutDefault = []string{"user_id", "exercise_goal"}
	exerciseGoalColumnsWithDefault    = []string{"id"}
	exerciseGoalPrimaryKeyColumns     = []string{"id"}
	exerciseGoalGeneratedColumns      = []string{}
)

type (
	// ExerciseGoalSlice is an alias for a slice of pointers to ExerciseGoal.
	// This should almost always be used instead of []ExerciseGoal.
	ExerciseGoalSlice []*ExerciseGoal
	// ExerciseGoalHook is the signature for custom ExerciseGoal hook methods
	ExerciseGoalHook func(context.Context, boil.ContextExecutor, *ExerciseGoal) error

	exerciseGoalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exerciseGoalType                 = reflect.TypeOf(&ExerciseGoal{})
	exerciseGoalMapping              = queries.MakeStructMapping(exerciseGoalType)
	exerciseGoalPrimaryKeyMapping, _ = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, exerciseGoalPrimaryKeyColumns)
	exerciseGoalInsertCacheMut       sync.RWMutex
	exerciseGoalInsertCache          = make(map[string]insertCache)
	exerciseGoalUpdateCacheMut       sync.RWMutex
	exerciseGoalUpdateCache          = make(map[string]updateCache)
	exerciseGoalUpsertCacheMut       sync.RWMutex
	exerciseGoalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var exerciseGoalAfterSelectHooks []ExerciseGoalHook

var exerciseGoalBeforeInsertHooks []ExerciseGoalHook
var exerciseGoalAfterInsertHooks []ExerciseGoalHook

var exerciseGoalBeforeUpdateHooks []ExerciseGoalHook
var exerciseGoalAfterUpdateHooks []ExerciseGoalHook

var exerciseGoalBeforeDeleteHooks []ExerciseGoalHook
var exerciseGoalAfterDeleteHooks []ExerciseGoalHook

var exerciseGoalBeforeUpsertHooks []ExerciseGoalHook
var exerciseGoalAfterUpsertHooks []ExerciseGoalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExerciseGoal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExerciseGoal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExerciseGoal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExerciseGoal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExerciseGoal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExerciseGoal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExerciseGoal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExerciseGoal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExerciseGoal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range exerciseGoalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExerciseGoalHook registers your hook function for all future operations.
func AddExerciseGoalHook(hookPoint boil.HookPoint, exerciseGoalHook ExerciseGoalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		exerciseGoalAfterSelectHooks = append(exerciseGoalAfterSelectHooks, exerciseGoalHook)
	case boil.BeforeInsertHook:
		exerciseGoalBeforeInsertHooks = append(exerciseGoalBeforeInsertHooks, exerciseGoalHook)
	case boil.AfterInsertHook:
		exerciseGoalAfterInsertHooks = append(exerciseGoalAfterInsertHooks, exerciseGoalHook)
	case boil.BeforeUpdateHook:
		exerciseGoalBeforeUpdateHooks = append(exerciseGoalBeforeUpdateHooks, exerciseGoalHook)
	case boil.AfterUpdateHook:
		exerciseGoalAfterUpdateHooks = append(exerciseGoalAfterUpdateHooks, exerciseGoalHook)
	case boil.BeforeDeleteHook:
		exerciseGoalBeforeDeleteHooks = append(exerciseGoalBeforeDeleteHooks, exerciseGoalHook)
	case boil.AfterDeleteHook:
		exerciseGoalAfterDeleteHooks = append(exerciseGoalAfterDeleteHooks, exerciseGoalHook)
	case boil.BeforeUpsertHook:
		exerciseGoalBeforeUpsertHooks = append(exerciseGoalBeforeUpsertHooks, exerciseGoalHook)
	case boil.AfterUpsertHook:
		exerciseGoalAfterUpsertHooks = append(exerciseGoalAfterUpsertHooks, exerciseGoalHook)
	}
}

// One returns a single exerciseGoal record from the query.
func (q exerciseGoalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExerciseGoal, error) {
	o := &ExerciseGoal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exercise_goals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExerciseGoal records from the query.
func (q exerciseGoalQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExerciseGoalSlice, error) {
	var o []*ExerciseGoal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExerciseGoal slice")
	}

	if len(exerciseGoalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExerciseGoal records in the query.
func (q exerciseGoalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exercise_goals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exerciseGoalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exercise_goals exists")
	}

	return count > 0, nil
}

// ExerciseGoals retrieves all the records using an executor.
func ExerciseGoals(mods ...qm.QueryMod) exerciseGoalQuery {
	mods = append(mods, qm.From("`exercise_goals`"))
	return exerciseGoalQuery{NewQuery(mods...)}
}

// FindExerciseGoal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExerciseGoal(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ExerciseGoal, error) {
	exerciseGoalObj := &ExerciseGoal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `exercise_goals` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, exerciseGoalObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exercise_goals")
	}

	if err = exerciseGoalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return exerciseGoalObj, err
	}

	return exerciseGoalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExerciseGoal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exercise_goals provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exerciseGoalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exerciseGoalInsertCacheMut.RLock()
	cache, cached := exerciseGoalInsertCache[key]
	exerciseGoalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exerciseGoalAllColumns,
			exerciseGoalColumnsWithDefault,
			exerciseGoalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `exercise_goals` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `exercise_goals` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `exercise_goals` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, exerciseGoalPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exercise_goals")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exerciseGoalMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exercise_goals")
	}

CacheNoHooks:
	if !cached {
		exerciseGoalInsertCacheMut.Lock()
		exerciseGoalInsertCache[key] = cache
		exerciseGoalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExerciseGoal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExerciseGoal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exerciseGoalUpdateCacheMut.RLock()
	cache, cached := exerciseGoalUpdateCache[key]
	exerciseGoalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exerciseGoalAllColumns,
			exerciseGoalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exercise_goals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `exercise_goals` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, exerciseGoalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, append(wl, exerciseGoalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exercise_goals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exercise_goals")
	}

	if !cached {
		exerciseGoalUpdateCacheMut.Lock()
		exerciseGoalUpdateCache[key] = cache
		exerciseGoalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exerciseGoalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exercise_goals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exercise_goals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExerciseGoalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exerciseGoalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `exercise_goals` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exerciseGoalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exerciseGoal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exerciseGoal")
	}
	return rowsAff, nil
}

var mySQLExerciseGoalUniqueColumns = []string{
	"id",
	"user_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExerciseGoal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exercise_goals provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exerciseGoalColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExerciseGoalUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exerciseGoalUpsertCacheMut.RLock()
	cache, cached := exerciseGoalUpsertCache[key]
	exerciseGoalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			exerciseGoalAllColumns,
			exerciseGoalColumnsWithDefault,
			exerciseGoalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			exerciseGoalAllColumns,
			exerciseGoalPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert exercise_goals, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`exercise_goals`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `exercise_goals` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for exercise_goals")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exerciseGoalMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(exerciseGoalType, exerciseGoalMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for exercise_goals")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exercise_goals")
	}

CacheNoHooks:
	if !cached {
		exerciseGoalUpsertCacheMut.Lock()
		exerciseGoalUpsertCache[key] = cache
		exerciseGoalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExerciseGoal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExerciseGoal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExerciseGoal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exerciseGoalPrimaryKeyMapping)
	sql := "DELETE FROM `exercise_goals` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exercise_goals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exercise_goals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exerciseGoalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exerciseGoalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exercise_goals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exercise_goals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExerciseGoalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(exerciseGoalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exerciseGoalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `exercise_goals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exerciseGoalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exerciseGoal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exercise_goals")
	}

	if len(exerciseGoalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExerciseGoal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExerciseGoal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExerciseGoalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExerciseGoalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exerciseGoalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `exercise_goals`.* FROM `exercise_goals` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exerciseGoalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExerciseGoalSlice")
	}

	*o = slice

	return nil
}

// ExerciseGoalExists checks if the ExerciseGoal row exists.
func ExerciseGoalExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `exercise_goals` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exercise_goals exists")
	}

	return exists, nil
}
