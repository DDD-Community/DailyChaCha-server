// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserExerciseHistory is an object representing the database table.
type UserExerciseHistory struct { // ID
	ID int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	// 사용자 ID
	UserID int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// 운동일
	ExerciseDate time.Time `boil:"exercise_date" json:"exercise_date" toml:"exercise_date" yaml:"exercise_date"`

	R *userExerciseHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userExerciseHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserExerciseHistoryColumns = struct {
	ID           string
	UserID       string
	ExerciseDate string
}{
	ID:           "id",
	UserID:       "user_id",
	ExerciseDate: "exercise_date",
}

var UserExerciseHistoryTableColumns = struct {
	ID           string
	UserID       string
	ExerciseDate string
}{
	ID:           "user_exercise_histories.id",
	UserID:       "user_exercise_histories.user_id",
	ExerciseDate: "user_exercise_histories.exercise_date",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserExerciseHistoryWhere = struct {
	ID           whereHelperint64
	UserID       whereHelperint64
	ExerciseDate whereHelpertime_Time
}{
	ID:           whereHelperint64{field: "`user_exercise_histories`.`id`"},
	UserID:       whereHelperint64{field: "`user_exercise_histories`.`user_id`"},
	ExerciseDate: whereHelpertime_Time{field: "`user_exercise_histories`.`exercise_date`"},
}

// UserExerciseHistoryRels is where relationship names are stored.
var UserExerciseHistoryRels = struct {
}{}

// userExerciseHistoryR is where relationships are stored.
type userExerciseHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*userExerciseHistoryR) NewStruct() *userExerciseHistoryR {
	return &userExerciseHistoryR{}
}

// userExerciseHistoryL is where Load methods for each relationship are stored.
type userExerciseHistoryL struct{}

var (
	userExerciseHistoryAllColumns            = []string{"id", "user_id", "exercise_date"}
	userExerciseHistoryColumnsWithoutDefault = []string{"user_id", "exercise_date"}
	userExerciseHistoryColumnsWithDefault    = []string{"id"}
	userExerciseHistoryPrimaryKeyColumns     = []string{"id"}
	userExerciseHistoryGeneratedColumns      = []string{}
)

type (
	// UserExerciseHistorySlice is an alias for a slice of pointers to UserExerciseHistory.
	// This should almost always be used instead of []UserExerciseHistory.
	UserExerciseHistorySlice []*UserExerciseHistory
	// UserExerciseHistoryHook is the signature for custom UserExerciseHistory hook methods
	UserExerciseHistoryHook func(context.Context, boil.ContextExecutor, *UserExerciseHistory) error

	userExerciseHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userExerciseHistoryType                 = reflect.TypeOf(&UserExerciseHistory{})
	userExerciseHistoryMapping              = queries.MakeStructMapping(userExerciseHistoryType)
	userExerciseHistoryPrimaryKeyMapping, _ = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, userExerciseHistoryPrimaryKeyColumns)
	userExerciseHistoryInsertCacheMut       sync.RWMutex
	userExerciseHistoryInsertCache          = make(map[string]insertCache)
	userExerciseHistoryUpdateCacheMut       sync.RWMutex
	userExerciseHistoryUpdateCache          = make(map[string]updateCache)
	userExerciseHistoryUpsertCacheMut       sync.RWMutex
	userExerciseHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userExerciseHistoryAfterSelectHooks []UserExerciseHistoryHook

var userExerciseHistoryBeforeInsertHooks []UserExerciseHistoryHook
var userExerciseHistoryAfterInsertHooks []UserExerciseHistoryHook

var userExerciseHistoryBeforeUpdateHooks []UserExerciseHistoryHook
var userExerciseHistoryAfterUpdateHooks []UserExerciseHistoryHook

var userExerciseHistoryBeforeDeleteHooks []UserExerciseHistoryHook
var userExerciseHistoryAfterDeleteHooks []UserExerciseHistoryHook

var userExerciseHistoryBeforeUpsertHooks []UserExerciseHistoryHook
var userExerciseHistoryAfterUpsertHooks []UserExerciseHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserExerciseHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserExerciseHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserExerciseHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserExerciseHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserExerciseHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserExerciseHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserExerciseHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserExerciseHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserExerciseHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userExerciseHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserExerciseHistoryHook registers your hook function for all future operations.
func AddUserExerciseHistoryHook(hookPoint boil.HookPoint, userExerciseHistoryHook UserExerciseHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userExerciseHistoryAfterSelectHooks = append(userExerciseHistoryAfterSelectHooks, userExerciseHistoryHook)
	case boil.BeforeInsertHook:
		userExerciseHistoryBeforeInsertHooks = append(userExerciseHistoryBeforeInsertHooks, userExerciseHistoryHook)
	case boil.AfterInsertHook:
		userExerciseHistoryAfterInsertHooks = append(userExerciseHistoryAfterInsertHooks, userExerciseHistoryHook)
	case boil.BeforeUpdateHook:
		userExerciseHistoryBeforeUpdateHooks = append(userExerciseHistoryBeforeUpdateHooks, userExerciseHistoryHook)
	case boil.AfterUpdateHook:
		userExerciseHistoryAfterUpdateHooks = append(userExerciseHistoryAfterUpdateHooks, userExerciseHistoryHook)
	case boil.BeforeDeleteHook:
		userExerciseHistoryBeforeDeleteHooks = append(userExerciseHistoryBeforeDeleteHooks, userExerciseHistoryHook)
	case boil.AfterDeleteHook:
		userExerciseHistoryAfterDeleteHooks = append(userExerciseHistoryAfterDeleteHooks, userExerciseHistoryHook)
	case boil.BeforeUpsertHook:
		userExerciseHistoryBeforeUpsertHooks = append(userExerciseHistoryBeforeUpsertHooks, userExerciseHistoryHook)
	case boil.AfterUpsertHook:
		userExerciseHistoryAfterUpsertHooks = append(userExerciseHistoryAfterUpsertHooks, userExerciseHistoryHook)
	}
}

// One returns a single userExerciseHistory record from the query.
func (q userExerciseHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserExerciseHistory, error) {
	o := &UserExerciseHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_exercise_histories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserExerciseHistory records from the query.
func (q userExerciseHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserExerciseHistorySlice, error) {
	var o []*UserExerciseHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserExerciseHistory slice")
	}

	if len(userExerciseHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserExerciseHistory records in the query.
func (q userExerciseHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_exercise_histories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userExerciseHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_exercise_histories exists")
	}

	return count > 0, nil
}

// UserExerciseHistories retrieves all the records using an executor.
func UserExerciseHistories(mods ...qm.QueryMod) userExerciseHistoryQuery {
	mods = append(mods, qm.From("`user_exercise_histories`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user_exercise_histories`.*"})
	}

	return userExerciseHistoryQuery{q}
}

// FindUserExerciseHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserExerciseHistory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserExerciseHistory, error) {
	userExerciseHistoryObj := &UserExerciseHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_exercise_histories` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userExerciseHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_exercise_histories")
	}

	if err = userExerciseHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userExerciseHistoryObj, err
	}

	return userExerciseHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserExerciseHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_exercise_histories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userExerciseHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userExerciseHistoryInsertCacheMut.RLock()
	cache, cached := userExerciseHistoryInsertCache[key]
	userExerciseHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userExerciseHistoryAllColumns,
			userExerciseHistoryColumnsWithDefault,
			userExerciseHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_exercise_histories` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_exercise_histories` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_exercise_histories` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userExerciseHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_exercise_histories")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userExerciseHistoryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_exercise_histories")
	}

CacheNoHooks:
	if !cached {
		userExerciseHistoryInsertCacheMut.Lock()
		userExerciseHistoryInsertCache[key] = cache
		userExerciseHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserExerciseHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserExerciseHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userExerciseHistoryUpdateCacheMut.RLock()
	cache, cached := userExerciseHistoryUpdateCache[key]
	userExerciseHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userExerciseHistoryAllColumns,
			userExerciseHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_exercise_histories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_exercise_histories` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userExerciseHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, append(wl, userExerciseHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_exercise_histories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_exercise_histories")
	}

	if !cached {
		userExerciseHistoryUpdateCacheMut.Lock()
		userExerciseHistoryUpdateCache[key] = cache
		userExerciseHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userExerciseHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_exercise_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_exercise_histories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserExerciseHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userExerciseHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_exercise_histories` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userExerciseHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userExerciseHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userExerciseHistory")
	}
	return rowsAff, nil
}

var mySQLUserExerciseHistoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserExerciseHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_exercise_histories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userExerciseHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserExerciseHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userExerciseHistoryUpsertCacheMut.RLock()
	cache, cached := userExerciseHistoryUpsertCache[key]
	userExerciseHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userExerciseHistoryAllColumns,
			userExerciseHistoryColumnsWithDefault,
			userExerciseHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userExerciseHistoryAllColumns,
			userExerciseHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert user_exercise_histories, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_exercise_histories`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_exercise_histories` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_exercise_histories")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userExerciseHistoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userExerciseHistoryType, userExerciseHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_exercise_histories")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_exercise_histories")
	}

CacheNoHooks:
	if !cached {
		userExerciseHistoryUpsertCacheMut.Lock()
		userExerciseHistoryUpsertCache[key] = cache
		userExerciseHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserExerciseHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserExerciseHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserExerciseHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userExerciseHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `user_exercise_histories` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_exercise_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_exercise_histories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userExerciseHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userExerciseHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_exercise_histories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_exercise_histories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserExerciseHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userExerciseHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userExerciseHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_exercise_histories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userExerciseHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userExerciseHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_exercise_histories")
	}

	if len(userExerciseHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserExerciseHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserExerciseHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserExerciseHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserExerciseHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userExerciseHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_exercise_histories`.* FROM `user_exercise_histories` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userExerciseHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserExerciseHistorySlice")
	}

	*o = slice

	return nil
}

// UserExerciseHistoryExists checks if the UserExerciseHistory row exists.
func UserExerciseHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_exercise_histories` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_exercise_histories exists")
	}

	return exists, nil
}
