// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExerciseDates(t *testing.T) {
	t.Parallel()

	query := ExerciseDates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExerciseDatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExerciseDatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExerciseDates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExerciseDatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExerciseDateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExerciseDatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExerciseDateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ExerciseDate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExerciseDateExists to return true, but got false.")
	}
}

func testExerciseDatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	exerciseDateFound, err := FindExerciseDate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if exerciseDateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExerciseDatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExerciseDates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExerciseDatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExerciseDates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExerciseDatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exerciseDateOne := &ExerciseDate{}
	exerciseDateTwo := &ExerciseDate{}
	if err = randomize.Struct(seed, exerciseDateOne, exerciseDateDBTypes, false, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}
	if err = randomize.Struct(seed, exerciseDateTwo, exerciseDateDBTypes, false, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exerciseDateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exerciseDateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExerciseDates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExerciseDatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	exerciseDateOne := &ExerciseDate{}
	exerciseDateTwo := &ExerciseDate{}
	if err = randomize.Struct(seed, exerciseDateOne, exerciseDateDBTypes, false, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}
	if err = randomize.Struct(seed, exerciseDateTwo, exerciseDateDBTypes, false, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exerciseDateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exerciseDateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func exerciseDateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func exerciseDateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExerciseDate) error {
	*o = ExerciseDate{}
	return nil
}

func testExerciseDatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExerciseDate{}
	o := &ExerciseDate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExerciseDate object: %s", err)
	}

	AddExerciseDateHook(boil.BeforeInsertHook, exerciseDateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	exerciseDateBeforeInsertHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.AfterInsertHook, exerciseDateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	exerciseDateAfterInsertHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.AfterSelectHook, exerciseDateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	exerciseDateAfterSelectHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.BeforeUpdateHook, exerciseDateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	exerciseDateBeforeUpdateHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.AfterUpdateHook, exerciseDateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	exerciseDateAfterUpdateHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.BeforeDeleteHook, exerciseDateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	exerciseDateBeforeDeleteHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.AfterDeleteHook, exerciseDateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	exerciseDateAfterDeleteHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.BeforeUpsertHook, exerciseDateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	exerciseDateBeforeUpsertHooks = []ExerciseDateHook{}

	AddExerciseDateHook(boil.AfterUpsertHook, exerciseDateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	exerciseDateAfterUpsertHooks = []ExerciseDateHook{}
}

func testExerciseDatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExerciseDatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(exerciseDateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExerciseDatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExerciseDatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExerciseDateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExerciseDatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExerciseDates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	exerciseDateDBTypes = map[string]string{`ID`: `int`, `UserID`: `int`, `ExerciseDate`: `int`, `ExerciseDateEn`: `varchar`, `ExerciseTime`: `int`}
	_                   = bytes.MinRead
)

func testExerciseDatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(exerciseDatePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(exerciseDateAllColumns) == len(exerciseDatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExerciseDatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(exerciseDateAllColumns) == len(exerciseDatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExerciseDate{}
	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exerciseDateDBTypes, true, exerciseDatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(exerciseDateAllColumns, exerciseDatePrimaryKeyColumns) {
		fields = exerciseDateAllColumns
	} else {
		fields = strmangle.SetComplement(
			exerciseDateAllColumns,
			exerciseDatePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExerciseDateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExerciseDatesUpsert(t *testing.T) {
	t.Parallel()

	if len(exerciseDateAllColumns) == len(exerciseDatePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLExerciseDateUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExerciseDate{}
	if err = randomize.Struct(seed, &o, exerciseDateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExerciseDate: %s", err)
	}

	count, err := ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, exerciseDateDBTypes, false, exerciseDatePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExerciseDate struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExerciseDate: %s", err)
	}

	count, err = ExerciseDates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
